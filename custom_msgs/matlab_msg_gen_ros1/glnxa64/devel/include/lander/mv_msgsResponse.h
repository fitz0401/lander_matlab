// Generated by gencpp from file lander/mv_msgsResponse.msg
// DO NOT EDIT!


#ifndef LANDER_MESSAGE_MV_MSGSRESPONSE_H
#define LANDER_MESSAGE_MV_MSGSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lander
{
template <class ContainerAllocator>
struct mv_msgsResponse_
{
  typedef mv_msgsResponse_<ContainerAllocator> Type;

  mv_msgsResponse_()
    : isFinish(false)  {
    }
  mv_msgsResponse_(const ContainerAllocator& _alloc)
    : isFinish(false)  {
  (void)_alloc;
    }



   typedef uint8_t _isFinish_type;
  _isFinish_type isFinish;





  typedef boost::shared_ptr< ::lander::mv_msgsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lander::mv_msgsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct mv_msgsResponse_

typedef ::lander::mv_msgsResponse_<std::allocator<void> > mv_msgsResponse;

typedef boost::shared_ptr< ::lander::mv_msgsResponse > mv_msgsResponsePtr;
typedef boost::shared_ptr< ::lander::mv_msgsResponse const> mv_msgsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lander::mv_msgsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lander::mv_msgsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lander::mv_msgsResponse_<ContainerAllocator1> & lhs, const ::lander::mv_msgsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.isFinish == rhs.isFinish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lander::mv_msgsResponse_<ContainerAllocator1> & lhs, const ::lander::mv_msgsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lander::mv_msgsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lander::mv_msgsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lander::mv_msgsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lander::mv_msgsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lander::mv_msgsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lander::mv_msgsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lander::mv_msgsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6016345cd57c8634afed560eaaf81c72";
  }

  static const char* value(const ::lander::mv_msgsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6016345cd57c8634ULL;
  static const uint64_t static_value2 = 0xafed560eaaf81c72ULL;
};

template<class ContainerAllocator>
struct DataType< ::lander::mv_msgsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lander/mv_msgsResponse";
  }

  static const char* value(const ::lander::mv_msgsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lander::mv_msgsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 服务器响应发送的数据\n"
"bool isFinish\n"
"\n"
;
  }

  static const char* value(const ::lander::mv_msgsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lander::mv_msgsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isFinish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mv_msgsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lander::mv_msgsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lander::mv_msgsResponse_<ContainerAllocator>& v)
  {
    s << indent << "isFinish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isFinish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LANDER_MESSAGE_MV_MSGSRESPONSE_H
