
classdef msgsRequest < ros.Message
    %msgsRequest MATLAB implementation of custon_robot_msgs/msgsRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.
    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'custon_robot_msgs/msgsRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '486898fd75f9040f7b995c917fb086ec' % The MD5 Checksum of the message definition
        PropertyList = { 'CommandIndex' 'Leg' 'XMotion' 'YMotion' 'ZMotion' 'DataNum' 'Foot1TraceX' 'Foot1TraceY' 'Foot1TraceZ' 'Foot2TraceX' 'Foot2TraceY' 'Foot2TraceZ' 'Foot3TraceX' 'Foot3TraceY' 'Foot3TraceZ' 'Foot4TraceX' 'Foot4TraceY' 'Foot4TraceZ' } % List of non-constant message properties
        ROSPropertyList = { 'command_index' 'leg' 'x_motion' 'y_motion' 'z_motion' 'data_num' 'foot1_trace_x' 'foot1_trace_y' 'foot1_trace_z' 'foot2_trace_x' 'foot2_trace_y' 'foot2_trace_z' 'foot3_trace_x' 'foot3_trace_y' 'foot3_trace_z' 'foot4_trace_x' 'foot4_trace_y' 'foot4_trace_z' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        CommandIndex
        Leg
        XMotion
        YMotion
        ZMotion
        DataNum
        Foot1TraceX
        Foot1TraceY
        Foot1TraceZ
        Foot2TraceX
        Foot2TraceY
        Foot2TraceZ
        Foot3TraceX
        Foot3TraceY
        Foot3TraceZ
        Foot4TraceX
        Foot4TraceY
        Foot4TraceZ
    end
    methods
        function set.CommandIndex(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'CommandIndex');
            obj.CommandIndex = int32(val);
        end
        function set.Leg(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Leg');
            obj.Leg = int32(val);
        end
        function set.XMotion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'XMotion');
            obj.XMotion = double(val);
        end
        function set.YMotion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'YMotion');
            obj.YMotion = double(val);
        end
        function set.ZMotion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'ZMotion');
            obj.ZMotion = double(val);
        end
        function set.DataNum(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'DataNum');
            obj.DataNum = int32(val);
        end
        function set.Foot1TraceX(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot1TraceX');
            obj.Foot1TraceX = double(val);
        end
        function set.Foot1TraceY(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot1TraceY');
            obj.Foot1TraceY = double(val);
        end
        function set.Foot1TraceZ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot1TraceZ');
            obj.Foot1TraceZ = double(val);
        end
        function set.Foot2TraceX(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot2TraceX');
            obj.Foot2TraceX = double(val);
        end
        function set.Foot2TraceY(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot2TraceY');
            obj.Foot2TraceY = double(val);
        end
        function set.Foot2TraceZ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot2TraceZ');
            obj.Foot2TraceZ = double(val);
        end
        function set.Foot3TraceX(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot3TraceX');
            obj.Foot3TraceX = double(val);
        end
        function set.Foot3TraceY(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot3TraceY');
            obj.Foot3TraceY = double(val);
        end
        function set.Foot3TraceZ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot3TraceZ');
            obj.Foot3TraceZ = double(val);
        end
        function set.Foot4TraceX(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot4TraceX');
            obj.Foot4TraceX = double(val);
        end
        function set.Foot4TraceY(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot4TraceY');
            obj.Foot4TraceY = double(val);
        end
        function set.Foot4TraceZ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'msgsRequest', 'Foot4TraceZ');
            obj.Foot4TraceZ = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.custon_robot_msgs.msgsRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.custon_robot_msgs.msgsRequest(strObj);
        end
    end
end
