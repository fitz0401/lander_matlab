/*
    需求: 
        编写两个节点实现服务通信，客户端节点需要提交两个整数到服务器
        服务器需要解析客户端提交的数据，相加后，将结果响应回客户端，
        客户端再解析

    服务器实现:
        1.包含头文件
        2.初始化 ROS 节点
        3.创建 ROS 句柄
        4.创建 客户端 对象
        5.请求服务，接收响应

*/
// 1.包含头文件
#include "ros/ros.h"
#include "lander_control/mv_msgs.h"

int main(int argc, char *argv[])
{
    setlocale(LC_ALL,"");
    // 2.初始化 ROS 节点
    ros::init(argc,argv,"Control_Plan_Client");
    // 3.创建 ROS 句柄
    ros::NodeHandle nh;
    // 4.创建 客户端 对象
    ros::ServiceClient client = nh.serviceClient<lander_control::mv_msgs>("mv_msgs");
    //等待服务启动成功
    //方式1
    ros::service::waitForService("mv_msgs");
    //方式2
    // client.waitForExistence();
    // 5.组织请求数据
    lander_control::mv_msgs rq;
    // 0:getpos; 1:init; 2:planfoot; 3:planmotion
    rq.request.command_index = 3;
    rq.request.leg = 12;
    rq.request.x_motion = 0.0;
    rq.request.y_motion = 0.0;
    rq.request.z_motion = -75.0;
    rq.request.data_num = 10;
    rq.request.foot1_trace_x = {441.840797218405, 443.050321975698, 444.259846732991, 445.469371490284,446.678896247577, 
                                447.888421004869, 449.097945762162, 450.307470519455, 451.516995276748, 452.72652003404};
    rq.request.foot1_trace_y = {-5.40E-15, 0.093040365945606, 0.186080731891216, 0.279121097836787,0.372161463782398,
                                0.465201829727969, 0.55824219567358, 0.651282561619191, 0.744322927564761, 0.837363293510372};
    rq.request.foot1_trace_z = {-520.1427, -520.1427, -520.1427, -520.1427,-520.1427, 
                                -520.1427, -520.1427, -520.1427, -520.1427, -520.1427};
    rq.request.foot2_trace_x = {441.840797218405, 443.050321975698, 444.259846732991, 445.469371490284,446.678896247577, 
                                447.888421004869, 449.097945762162, 450.307470519455, 451.516995276748, 452.72652003404};
    rq.request.foot2_trace_y = {-5.40E-15, 0.093040365945606, 0.186080731891216, 0.279121097836787,0.372161463782398,
                                0.465201829727969, 0.55824219567358, 0.651282561619191, 0.744322927564761, 0.837363293510372};
    rq.request.foot2_trace_z = {-520.1427, -520.1427, -520.1427, -520.1427,-520.1427, 
                                -520.1427, -520.1427, -520.1427, -520.1427, -520.1427};
    rq.request.foot3_trace_x = {441.840797218405, 443.050321975698, 444.259846732991, 445.469371490284,446.678896247577, 
                                447.888421004869, 449.097945762162, 450.307470519455, 451.516995276748, 452.72652003404};
    rq.request.foot3_trace_y = {-5.40E-15, 0.093040365945606, 0.186080731891216, 0.279121097836787,0.372161463782398,
                                0.465201829727969, 0.55824219567358, 0.651282561619191, 0.744322927564761, 0.837363293510372};
    rq.request.foot3_trace_z = {-520.1427, -520.1427, -520.1427, -520.1427,-520.1427, 
                                -520.1427, -520.1427, -520.1427, -520.1427, -520.1427};
    rq.request.foot4_trace_x = {441.840797218405, 443.050321975698, 444.259846732991, 445.469371490284,446.678896247577, 
                                447.888421004869, 449.097945762162, 450.307470519455, 451.516995276748, 452.72652003404};
    rq.request.foot4_trace_y = {-5.40E-15, 0.093040365945606, 0.186080731891216, 0.279121097836787,0.372161463782398,
                                0.465201829727969, 0.55824219567358, 0.651282561619191, 0.744322927564761, 0.837363293510372};
    rq.request.foot4_trace_z = {-520.1427, -520.1427, -520.1427, -520.1427,-520.1427, 
                                -520.1427, -520.1427, -520.1427, -520.1427, -520.1427};
    
    
    // 6.发送请求,返回 bool 值，标记是否成功
    bool flag = client.call(rq);
    // 7.处理响应
    if (flag)
    {
        ROS_INFO("请求正常处理,响应结果:%d",rq.response.isFinish);
    }
    else
    {
        ROS_ERROR("请求处理失败....");
        return 1;
    }

    return 0;
}

